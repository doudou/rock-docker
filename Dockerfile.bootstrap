FROM <%= source_image_id %>

### Cache setup for Debian images
# We have to remvoe the lock file since it goes into the shared directory
# and could therefore become 'stale'
RUN rm -f /var/cache/apt/archives/lock
# The docker Debian images remote all files in /var/cache/apt/archives
# We don't want that as we are actually caching in a shared volume to
# avoid re-downloading
RUN rm -f /etc/apt/apt.conf.d/docker-clean /etc/apt/apt.conf.d/no-cache
### END setup for Debian images

### Cache setup for OpenSUSE images
# Caching the downloaded RPMs is not done by default on OpenSUSE. Enable it, we
# are mounting the relevant directory into a shared volume
<% if image.name == 'opensuse' %>
RUN echo "keeppackages=1" >> /etc/zypp/repos.d/openSUSE_13.1_OSS.repo
RUN echo "keeppackages=1" >> /etc/zypp/repos.d/openSUSE_13.1_Updates.repo
<% end %>

RUN <%= package_manager[0] %>
RUN <%= package_manager[1] % [ruby[0]] %>
RUN <%= package_manager[1] % ['sudo'] %>
RUN groupadd rock 
RUN useradd -m -g rock -G rock,users rock
RUN echo "rock ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/rock ; chmod 0440 /etc/sudoers.d/rock
RUN echo "Defaults !requiretty" >> /etc/sudoers.d/rock

# There is a weird bug in docker (or aufs ?). Running mkdir after USER sometimes
# sets the ownership of the directory to root:root
RUN mkdir /home/rock/dev ; chown rock:rock /home/rock/dev

USER rock
ENV HOME /home/rock
WORKDIR /home/rock/dev
<% if dev_mode %>
ADD ressources/autoproj_bootstrap-dev /home/rock/dev/autoproj_bootstrap
<% else %>
ADD ressources/autoproj_bootstrap /home/rock/dev/autoproj_bootstrap
<% end %>
RUN AUTOPROJ_OSDEPS_MODE=all AUTOPROJ_BOOTSTRAP_IGNORE_NONEMPTY_DIR=1 <%= ruby[1] %> autoproj_bootstrap <%= dev_mode ? 'dev' : '' %> --no-color --no-progress git git://gitorious.org/rock/buildconf.git
